# Satellite Game Development Roadmap v0.1.1

## Введение
Этот документ определяет план разработки изометрической игры "Satellite" в жанре extraction shooter. Игра использует изометрическую проекцию с фейковым 3D рендерингом для создания глубины и объема уровней. Основная цель игрока - развивать базу на орбитальной станции и совершать вылазки на процедурно генерируемые уровни для сбора ресурсов.

## 1. Базовая архитектура движка

### 1.1 Общая структура
- **Engine** - ядро движка, управляющее игровым циклом
- **Scene** - класс для управления всеми объектами на уровне
- **Entity** - базовый класс для всех игровых объектов
- **Renderer** - система визуализации
- **ResourceManager** - система управления ресурсами
- **InputSystem** - система обработки ввода
- **CollisionSystem** - система обработки коллизий

### 1.2 Обсуждение технологий
**Базовые библиотеки:**
- SDL2 - основа для окна и рендеринга
- SDL2_image - для работы с изображениями
- SDL2_ttf - для работы с текстом
- SDL2_mixer (опционально) - для звуков
- SDL_net или enet - для сетевого взаимодействия в мультиплеере

**Вопрос использования 3D рендеринга:**
- **Вариант 1 (Рекомендуемый для начала)**: Использовать только SDL2 для рендеринга 2D изометрии, что упростит разработку на начальных этапах
- **Вариант 2**: Интегрировать OpenGL через SDL2, что позволит использовать шейдеры и расширенные 3D-эффекты для более качественной изометрической графики
- **Вариант 3**: Использовать готовый 3D движок (например, Unreal Engine или Unity) для получения всех необходимых инструментов сразу
- **Вариант 4**: Создать абстрактный интерфейс рендеринга, который позволит переключаться между режимами 2D и 3D в будущем

**Рекомендация с учетом изометрической графики и мультиплеера**: 
Начать с варианта 2 - использовать SDL2 с OpenGL для создания расширенной изометрической графики с поддержкой сетевой игры. Это даст достаточную гибкость для реализации качественного изометрического рендеринга, при этом сохраняя полный контроль над исходным кодом для оптимизации сетевого взаимодействия.

## 2. Этапы разработки

### Фаза 1: Базовый движок и рендеринг
#### Этап 1.1: Основа проекта (1-2 дня)
- Создание проекта и настройка среды разработки
- Реализация базовых классов движка (Engine, Scene)
- Базовая настройка SDL2 и создание окна
- Создание Game Loop и обработка основных событий

#### Этап 1.2: Система рендеринга (2-3 дня)
- Разработка базовой системы рендеринга в изометрической проекции
- Реализация функций преобразования между мировыми и экранными координатами
- Создание системы камеры с поддержкой масштабирования и панорамирования
- Реализация рендеринга базовых примитивов (ромбы для представления тайлов)

#### Этап 1.3: Тестовый рендеринг (1-2 дня)
- Создание тестовых тайлов разных типов
- Отрисовка тестового уровня с различными типами тайлов
- Реализация отрисовки объемных тайлов (стены, колонны)
- Настройка Z-сортировки для правильного перекрытия объектов

### Фаза 2: Системы карты и генерации уровней
#### Этап 2.1: Система тайлов (2-3 дня)
- Разработка класса MapTile с различными свойствами (проходимость, тип)
- Создание класса TileMap для хранения и управления картой
- Определение различных типов тайлов (пол, стена, вода и т.д.)
- Реализация функций доступа и проверки тайлов

#### Этап 2.2: Генерация карты (3-4 дня)
- Реализация алгоритма случайной генерации комнат
- Добавление генерации коридоров между комнатами
- Реализация различных биомов или тематических зон
- Добавление специальных локаций (входы, выходы, точки интереса)

#### Этап 2.3: Визуальное улучшение карты (2-3 дня)
- Реализация системы освещения (базовая)
- Добавление декоративных элементов (растения, обломки, и т.д.)
- Улучшение визуального представления различных типов поверхностей
- Добавление анимированных тайлов (вода, огонь)

### Фаза 3: Персонаж и взаимодействие
#### Этап 3.1: Класс игрока и движение (2-3 дня)
- Создание класса Player, унаследованного от Entity
- Реализация перемещения в изометрической проекции
- Настройка плавной анимации движения
- Реализация поворота персонажа в зависимости от направления движения

#### Этап 3.2: Система коллизий (2-3 дня)
- Разработка базовой системы коллизий для статических объектов
- Реализация проверки коллизий игрока с картой
- Добавление проверки коллизий между динамическими объектами
- Реализация отталкивания и скольжения вдоль стен

#### Этап 3.3: Интерактивные объекты (3-4 дня)
- Создание базового класса InteractiveObject
- Реализация предметов, которые можно подобрать
- Добавление дверей, которые можно открыть
- Создание терминалов, переключателей и других интерактивных элементов

### Фаза 4: Системы инвентаря и предметов
#### Этап 4.1: Инвентарь (2-3 дня)
- Разработка системы инвентаря игрока
- Создание UI для отображения инвентаря
- Реализация операций с предметами (сортировка, использование)
- Добавление системы хранения и управления предметами

#### Этап 4.2: Система предметов (3-4 дня)
- Создание класса Item с различными свойствами и типами
- Реализация различных категорий предметов (оружие, ресурсы, медикаменты)
- Добавление редкости и ценности предметов
- Реализация механики использования предметов

#### Этап 4.3: Бонусы от снаряжения (2-3 дня)
- Реализация системы экипировки игрока
- Добавление бонусов к характеристикам игрока от снаряжения
- Создание системы модификаторов снаряжения
- Реализация синергии между различными предметами

### Фаза 5: Космическая база (Спутник)
#### Этап 5.1: Структура базы (3-4 дня)
- Разработка класса орбитальной станции
- Создание системы модулей базы
- Реализация различных типов модулей (жилые, производственные, научные)
- Добавление интерактивных элементов на базе

#### Этап 5.2: Строительство и улучшение (3-4 дня)
- Реализация системы строительства новых модулей
- Добавление улучшений для существующих модулей
- Создание системы ресурсов для строительства
- Реализация визуального отображения развивающейся базы

#### Этап 5.3: Управление базой (3-4 дня)
- Создание системы управления ресурсами базы
- Реализация персонала базы и их специализаций
- Добавление системы исследований и технологий
- Реализация взаимосвязей между модулями базы

### Фаза 6: Система рейдов
#### Этап 6.1: Механика рейдов (2-3 дня)
- Разработка системы выхода в рейд из базы
- Создание процедурной генерации уровней для рейдов
- Реализация системы сложности рейдов
- Добавление различных заданий и целей в рейдах

#### Этап 6.2: Награды и последствия (2-3 дня)
- Реализация системы добычи ресурсов и предметов
- Добавление риск/награда механик (более глубокое проникновение = больше наград)
- Создание системы экстракции (выхода из рейда)
- Реализация последствий смерти в рейде

#### Этап 6.3: Разнообразие локаций (3-4 дня)
- Создание различных биомов и тематических зон для рейдов
- Добавление уникальных особенностей для каждой локации
- Реализация особых опасностей и врагов для разных локаций
- Создание уникальных ресурсов, связанных с конкретными локациями

### Фаза 7: ИИ и враги
#### Этап 7.1: Базовый ИИ (3-4 дня)
- Разработка базовой системы искусственного интеллекта
- Создание системы обнаружения игрока
- Реализация базового патрулирования
- Добавление состояний ИИ (спокойный, настороженный, агрессивный)

#### Этап 7.2: Различные типы врагов (3-4 дня)
- Создание разных типов врагов с уникальными характеристиками
- Реализация уникального поведения для разных типов
- Добавление боссов или элитных врагов
- Реализация групповой тактики для некоторых типов врагов

#### Этап 7.3: Улучшение ИИ (2-3 дня)
- Добавление использования укрытий врагами
- Реализация более сложной тактики
- Улучшение системы поиска пути
- Добавление коммуникации между врагами

### Фаза 8: Боевая система
#### Этап 8.1: Базовый бой (3-4 дня)
- Разработка системы атаки и получения урона
- Создание различных типов оружия
- Реализация системы здоровья и щитов
- Добавление визуальных эффектов для боя

#### Этап 8.2: Улучшенный бой (3-4 дня)
- Добавление специальных способностей
- Реализация системы перезарядки и боеприпасов
- Создание модификаторов для оружия
- Реализация системы критических ударов и уклонения

#### Этап 8.3: Дальнейшие улучшения (2-3 дня)
- Добавление системы укрытий для игрока
- Реализация разрушаемой среды
- Создание системы комбо-атак
- Добавление различных стилей боя

### Фаза 9: Система прогрессии
#### Этап 9.1: Опыт и уровни (2-3 дня)
- Разработка системы опыта и уровней персонажа
- Создание навыков и умений, разблокируемых с уровнями
- Реализация дерева талантов
- Добавление специализаций персонажа

#### Этап 9.2: Развитие снаряжения (2-3 дня)
- Создание системы улучшения предметов
- Реализация разборки и крафта предметов
- Добавление редких и легендарных предметов
- Создание сетов снаряжения с бонусами

#### Этап 9.3: Репутация и фракции (2-3 дня)
- Разработка системы репутации с различными фракциями
- Создание уникальных наград за репутацию
- Реализация квестов и заданий от фракций
- Добавление последствий выбора между фракциями

### Фаза 10: Финализация и оптимизация
#### Этап 10.1: UI и UX (3-4 дня)
- Улучшение пользовательского интерфейса
- Добавление настроек и конфигурации
- Создание экранов меню, паузы, инвентаря
- Реализация подсказок и обучения

#### Этап 10.2: Оптимизация (3-4 дня)
- Профилирование и оптимизация рендеринга
- Улучшение производительности физики и коллизий
- Оптимизация системы ИИ
- Сокращение использования памяти

#### Этап 10.3: Отладка и тестирование (3-4 дня)
- Исправление известных ошибок
- Тестирование на различных конфигурациях
- Балансировка игрового процесса
- Получение и обработка обратной связи

### Фаза 11: Сетевая игра (мультиплеер)
#### Этап 11.1: Базовая сетевая инфраструктура (5-7 дней)
- Разработка архитектуры клиент-сервер
- Реализация сетевого протокола для обмена данными
- Создание системы сериализации игровых объектов
- Настройка сервера и клиентского подключения

#### Этап 11.2: Синхронизация состояний (4-6 дней)
- Разработка системы синхронизации позиций игроков
- Реализация интерполяции движения и предсказания действий
- Создание механизма компенсации задержки
- Оптимизация обмена сетевыми пакетами

#### Этап 11.3: Кооперативные рейды (4-5 дней)
- Адаптация генерации рейдов для нескольких игроков
- Реализация разделения добычи между игроками
- Добавление совместных механик и синергии
- Создание системы поиска игроков (matchmaking)

#### Этап 11.4: PvP и социальные механики (3-5 дней)
- Реализация PvP режима (опционально)
- Добавление системы враждебности/дружелюбия
- Создание чата и эмоций для коммуникации
- Реализация системы репутации между игроками

## 3. Технические детали реализации

### 3.1 Изометрический рендеринг
```cpp
// Преобразование из мировых координат в экранные
void isoToScreen(float worldX, float worldY, float& screenX, float& screenY) {
    screenX = (worldX - worldY) * (TILE_WIDTH / 2);
    screenY = (worldX + worldY) * (TILE_HEIGHT / 2);
}

// Преобразование из экранных координат в мировые
void screenToIso(float screenX, float screenY, float& worldX, float& worldY) {
    worldX = (screenX / (TILE_WIDTH / 2) + screenY / (TILE_HEIGHT / 2)) / 2;
    worldY = (screenY / (TILE_HEIGHT / 2) - screenX / (TILE_WIDTH / 2)) / 2;
}
```

### 3.2 Рендеринг объемных тайлов
```cpp
// Рендеринг объемного тайла (упрощенно)
void renderVolumetricTile(SDL_Renderer* renderer, int x, int y, int height, SDL_Color topColor, SDL_Color leftColor, SDL_Color rightColor) {
    // Верхняя грань (ромб)
    SDL_Point topFace[4];
    topFace[0] = { x, y - height };
    topFace[1] = { x + TILE_WIDTH/2, y + TILE_HEIGHT/2 - height };
    topFace[2] = { x, y + TILE_HEIGHT - height };
    topFace[3] = { x - TILE_WIDTH/2, y + TILE_HEIGHT/2 - height };
    
    // Боковые грани (при необходимости)
    // ...
    
    // Отрисовка граней
    // ...
}
```

### 3.3 Z-сортировка объектов
```cpp
// Z-сортировка объектов для правильного перекрытия
void sortEntitiesByDepth(std::vector<Entity*>& entities) {
    std::sort(entities.begin(), entities.end(), [](const Entity* a, const Entity* b) {
        auto posA = a->getPosition();
        auto posB = b->getPosition();
        
        // Сравниваем по y, затем по x
        if (posA.y != posB.y)
            return posA.y < posB.y;
        if (posA.x != posB.x)
            return posA.x < posB.x;
        
        // Если x и y равны, сравниваем по z
        return posA.z < posB.z;
    });
}
```

## 4. Требования к ресурсам и ограничения

### 4.1 Системные требования
- Windows 10 (64-bit)
- Процессор: Intel Core i3 или AMD FX
- Оперативная память: 4 GB RAM
- Графика: Integrated Intel HD Graphics 4000 или AMD Radeon R5
- DirectX: Версия 11
- Хранилище: 500 MB доступного пространства

### 4.2 Ограничения движка
- Максимальный размер карты: 256x256 тайлов
- Максимальное количество объектов на сцене: 1000
- Максимальное количество модулей на базе: 50
- Максимальное количество предметов в инвентаре: 100
- Максимальное количество одновременных игроков в рейде: 4

### 4.3 Сетевые требования для мультиплеера
- Скорость соединения: 1 Mbps и выше
- Задержка: менее 200 мс для комфортной игры
- Архитектура: клиент-серверная с авторитарным сервером
- Протокол: UDP для минимизации задержек

## 5. Изометрическая перспектива в игре

Изометрическая перспектива была выбрана как основной и единственный вид для игры "Satellite" благодаря ряду преимуществ, которые она предоставляет.

### 5.1 Преимущества изометрического вида

**Стратегический обзор:**
- Лучший стратегический обзор окружения
- Возможность видеть больше объектов одновременно
- Улучшенное восприятие тактической ситуации на карте
- Более интуитивное понимание пространственных отношений

**Геймплей:**
- Упрощенное управление перемещением
- Более подходит для тактического геймплея
- Легче реализовать взаимодействие с множеством объектов
- Хорошо подходит для игр с элементами стратегии и RPG

**Технические аспекты:**
- Технически проще в реализации
- Более эффективное использование ресурсов
- Меньшие требования к производительности
- Отличительный визуальный стиль, создающий уникальную атмосферу

### 5.2 Преодоление ограничений изометрии

Для преодоления традиционных ограничений изометрического вида планируется:

- **Улучшенная графика и освещение:**
  - Использование динамического освещения для создания атмосферы
  - Применение пост-эффектов для усиления эмоционального воздействия
  - Детализированные текстуры и спрайты

- **Расширенные возможности камеры:**
  - Масштабирование для обзора как крупных планов, так и общей картины
  - Плавные переходы и перемещения камеры
  - Фокусировка на ключевых событиях

- **Погружение и атмосфера:**
  - Качественное звуковое оформление для усиления погружения
  - Атмосферные эффекты (туман, дым, освещение)
  - Кинематографические моменты для ключевых событий
## 6. Заключение
Данный план разработки представляет собой дорожную карту для создания игры "Satellite" от базовой структуры до полноценного геймплея. Поэтапный подход позволит контролировать прогресс и корректировать направление разработки по мере необходимости.

## 7. Приложения

### 7.1 Схема классов движка с учетом мультиплеера
```
Engine
├── Scene
│   ├── Entity
│   │   ├── Player
│   │   │   ├── LocalPlayer
│   │   │   └── RemotePlayer
│   │   ├── InteractiveObject
│   │   │   ├── Item
│   │   │   ├── Door
│   │   │   └── Terminal
│   │   └── Enemy
│   └── TileMap
│       └── MapTile
├── Renderer
│   ├── IsometricRenderer
│   ├── LightingSystem
│   └── EffectsManager
├── ResourceManager
├── InputSystem
├── CollisionSystem
├── NetworkManager
│   ├── Client
│   ├── Server
│   └── Serializer
└── UIManager
    ├── HUD
    └── Menus
```
### 7.2 Диаграмма взаимодействия компонентов с учетом мультиплеера
```
                  +---------------+
                  |    Engine     |
                  +-------+-------+
                          |
          +---------------+---------------+
          |               |               |
+---------v-----+ +-------v-------+ +-----v---------+
| NetworkManager| |     Scene     | | ResourceManager|
+---------+-----+ +-------+-------+ +---------------+
          |               |
+---------v-----+ +-------v-------+
|    Server     | |    Renderer   |<---+
+---------------+ +-------+-------+    |
                          |            |
                  +-------v-------+    |
                  |    Entity     |    |
                  +-------+-------+    |
                          |            |
          +---------------+---------------+
          |               |               |
+---------v-----+ +-------v-------+ +-----v---------+
|    Player     | | InteractiveObj| |    Enemy      |
+---------------+ +---------------+ +---------------+
      ^                                    ^
      |                                    |
      +------------------------------------+
                Сетевая синхронизация
```

### 7.3 Контрольные точки и сроки
- MVP (Минимально жизнеспособный продукт): Базовый движок, рендеринг тайлов, управление персонажем - 2 недели
- Альфа-версия: Базовые системы, простые враги, инвентарь - 2 месяца
- Бета-версия: Все ключевые механики, баланс, тестирование - 4 месяца
- Релиз: Полный функционал, оптимизация, отладка - 6 месяцев